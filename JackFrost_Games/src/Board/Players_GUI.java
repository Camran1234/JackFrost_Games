/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Board;

import File.ErrorException_GUI;
import Map_Initializer.Map;
import Player.Player;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashSet;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author camran
 */
public class Players_GUI extends javax.swing.JFrame {
    private Map map;
    private Player[] players;
    /**
     * Creates new form Players_GUI
     */
    public Players_GUI(Map map) {
        this.map = map;
        initComponents();
        jPanel1.revalidate();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        panelJugadores = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        labelNombre = new javax.swing.JLabel();
        labelColor = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setOpaque(true);
        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setText("JUGADORES");

        jLabel2.setText("No. Jugadores");

        jButton1.setText("Ingresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        panelJugadores.setOpaque(true);
        panelJugadores.setBackground(new java.awt.Color(204, 255, 204));
        panelJugadores.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 153, 51), 7, true));

        javax.swing.GroupLayout panelJugadoresLayout = new javax.swing.GroupLayout(panelJugadores);
        panelJugadores.setLayout(panelJugadoresLayout);
        panelJugadoresLayout.setHorizontalGroup(
            panelJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelJugadoresLayout.setVerticalGroup(
            panelJugadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 263, Short.MAX_VALUE)
        );

        for(int index=2;index<=map.getPlayerHandler().getPlayersLimit();index++){
            jComboBox1.addItem(Integer.toString(index));
        }

        labelNombre.setText("Nombre");
        labelNombre.setVisible(false);

        labelColor.setText("Color");
        labelColor.setVisible(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(46, 46, 46)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 33, Short.MAX_VALUE))
                            .addComponent(panelJugadores, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(89, 89, 89)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(labelNombre)
                                .addGap(65, 65, 65)
                                .addComponent(labelColor)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombre)
                    .addComponent(labelColor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelJugadores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        labelNombre.setVisible(true);
        labelColor.setVisible(true);
        panelJugadores.removeAll();
        panelJugadores.setLayout(new GridLayout(0,1));
        //a√±adimos la cantidad de slots pedidos por el usuario de jugadores
        panelJugadores.repaint();
        for (int i=0;i<Integer.parseInt(jComboBox1.getSelectedItem().toString());i++){
            panelJugadores.add(new Playeradd_GUI());
        }
        JButton button = new JButton("Ingresar");
        button.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent a){
                accion();
            }
        });
        panelJugadores.add(button);
        panelJugadores.revalidate();
        this.setSize(500,700);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void accion(){
        map.getPlayerHandler().setPlayersLimit(map.getPlayerHandler().getPlayersLimit());
        Player playerAux;
        Color colorAux;
        players = new Player[Integer.parseInt(jComboBox1.getSelectedItem().toString())];
        boolean ingresar=true;
        boolean casillaVacia = true;
        int[] numerosChecados = new int[Integer.parseInt(jComboBox1.getSelectedItem().toString())];
        Random random = new Random();
        
        for(int index=0;index<numerosChecados.length;index++){
            numerosChecados[index] = -1;
        }
        //Con este for nos permite saber si algun textField se encuentra vacio
        //Si lo esta lanzara una excepcion
        for(int index=0;index<numerosChecados.length;index++){
            JPanel panelAux = (JPanel) panelJugadores.getComponent(index);
            JTextField textFieldAux = (JTextField)panelAux.getComponent(0);
            System.out.println(textFieldAux.getText());
            if(textFieldAux.getText().equalsIgnoreCase("")){
                casillaVacia=false;
            }
        }
      
        if(casillaVacia){
        for(int i=0;i<Integer.parseInt(jComboBox1.getSelectedItem().toString());i++){
            JPanel panelAux = (JPanel) panelJugadores.getComponent(i);
            JComboBox comboBoxAux = (JComboBox)panelAux.getComponent(1);
            JTextField textFieldAux = (JTextField)panelAux.getComponent(0);
            //Comprobamos que color se escogio
            switch(comboBoxAux.getSelectedItem().toString()){
                case"Rojo":
                    colorAux = Color.RED;
                    break;
                case"Azul":
                    colorAux = Color.BLUE;
                    break;
                case"Verde":
                    colorAux = Color.GREEN;
                    break;
                case"Rosado":
                    colorAux = Color.PINK;
                    break;
                case"Negro":
                    colorAux = Color.BLACK;
                    break;
                case"Amarillo":
                    colorAux = Color.YELLOW;
                    break;
                default:
                    colorAux = Color.WHITE;
            }
            //Le agregamos al jugador su ruta y el dinero inicial con el que empezara el juego
            playerAux = new Player(map.getRoute(),colorAux,map.getBank().getDineroInicial(),
                    textFieldAux.getText());
            //Comparamos de que no halla colores repetidos
            for(int indexP=0;indexP<Integer.parseInt(jComboBox1.getSelectedItem().toString());indexP++){
                if(players[indexP] ==null){
                    this.players[indexP] = (playerAux);
                    break;                        
                }else{
                    //Comparamos los colores de los jugadores por medio de su color en RGB
                    if(players[indexP].getColor().getRGB() == playerAux.getColor().getRGB()){
                        ingresar=false;
                        new ErrorException_GUI("Se han repetido los Colores, vuelve a intentar");
                        break;
                    }
                }
            }
        }
            //Si no hay colores repetidos entonces avanzamos
            if(ingresar==true){
                int numeroAux;
                boolean ciclo=true;
                int numerosEncontrados=0;
                while(ciclo){
                    //Agregamos un valor Aleatorio
                    numeroAux = random.nextInt( (Integer.parseInt(jComboBox1.getSelectedItem().toString())-1) +1);
                    
                    //Comprobamos un orden Aleatorio de que no se repitan
                    for(int index=0;index<players.length;index++){
                        if(numerosChecados[index] != -1){
                            if(numeroAux == numerosChecados[index]){
                                break;
                            }
                        }else{
                            numerosChecados[index] = numeroAux;
                            numerosEncontrados++;
                            break;
                        }
                    }
                    
                    //Si ya han llegado al tama√±o solicitado se sale del ciclo
                    if(numerosEncontrados==players.length){
                        ciclo=false;
                    }
                }
                
                //Ingresamos el vector en orden aleatorio
                for(int index=0;index<players.length;index++){
                    
                    try {
                        map.getPlayerHandler().addPlayer(players[numerosChecados[index]]);
                    } catch (ErrorException_GUI ex) {
                        Logger.getLogger(Players_GUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                //Le asignamos a cada casilla un vector de los jugadores que nos falicitara muchos proceso 
                //mas tarde
                for(int index=0;index<map.getRoute().getRoute().length;index++){
                    map.getRoute().getRoute()[index].getBox().setPlayers(map.getPlayerHandler().getPlayers());
                }
                this.setVisible(false);
                new Board_GUI(map);
                this.dispose();
                
                //Un metodo que imprima y empiece el tablero
            }else{
                new ErrorException_GUI("Error creando a los personajes");
            }
        }else{
                new ErrorException_GUI("Casillas vacias, llenelas porfavor");

        }
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelColor;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JPanel panelJugadores;
    // End of variables declaration//GEN-END:variables
}
