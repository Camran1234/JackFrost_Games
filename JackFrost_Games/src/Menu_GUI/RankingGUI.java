/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Menu_GUI;

import File.Ranking;
import Player.Score;
import javax.swing.JLabel;

/**
 *
 * @author camran
 */
public class RankingGUI extends javax.swing.JFrame {
    private Ranking ranking = new Ranking();
    private Ranking rankingOrigin;
    /**
     * Creates new form RankingGUI
     */
    public RankingGUI(Ranking ranking) {
        this.ranking.setResults(ranking.getResults());
        this.rankingOrigin = ranking;
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setOpaque(true);
        jPanel1.setBackground(new java.awt.Color(102, 255, 255));
        jPanel1.setForeground(new java.awt.Color(102, 255, 255));

        jLabel1.setFont(new java.awt.Font("DejaVu Sans Condensed", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Resultados");
        jLabel1.setOpaque(true);
        jLabel1.setHorizontalAlignment(JLabel.CENTER);
        jLabel1.setVerticalAlignment(JLabel.CENTER);

        jTextArea1.setBackground(new java.awt.Color(255, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea1.setRows(5);
        jTextArea1.setOpaque(true);
        jTextArea1.setEditable(false);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("Ascendente");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Descendente");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Ganadores");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Perdedores");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Todos");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(213, 213, 213)
                .addComponent(jLabel1)
                .addGap(0, 381, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)))
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ordenarAscendente();
        setText();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ordenarDescendente();
        setText();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        getGanadores();
        setText();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        this.ranking.setResults(rankingOrigin.getResults());
        setText();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        getPerdedores();
        setText();
    }//GEN-LAST:event_jButton4ActionPerformed

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    /**
     * Imprimimos en el textArea los resultados, sin importar 
     */
    private void setText() {
        jTextArea1.setText("");
        for(int index=0;index<ranking.getResults().length;index++){
            jTextArea1.append(ranking.getResults()[index].getData());
        }
    }
    
    /**
     * Se uso el metodo de ordenamiento por seleccion para ordenar los resultados, al ser ascendente buscaremos
     * el numero menor del arreglo y lo moveremos bruscamente al inicio del vector
     */
     private void ordenarAscendente(){
        Score scoreAux;
        for (int indexI =0 ; indexI<ranking.getResults().length-1;indexI++){
            int menor = indexI;
            for (int indexJ = indexI+1; indexJ < ranking.getResults().length ; indexJ++){
                if(ranking.getResults()[indexJ].getScore() < ranking.getResults()[menor].getScore()){
                menor = indexJ;
                }
            }
            
            if( menor != indexI){
                scoreAux = ranking.getResults()[indexI];
                ranking.getResults()[indexI] = ranking.getResults()[menor];
                ranking.getResults()[menor] = scoreAux;
            }
        }
    }
     /**
      * Se uso el metodo de ordenamiento por seleccion para ordenar los resultados, al ser ascendente buscaremos
     * el numero mayor del arreglo y lo moveremos bruscamente al inicio del vector
      */
     private void ordenarDescendente(){
        Score scoreAux;
        for (int indexI =0 ; indexI<ranking.getResults().length-1;indexI++){
            int mayor = indexI;
            for (int indexJ = indexI+1; indexJ < ranking.getResults().length ; indexJ++){
                if(ranking.getResults()[indexJ].getScore() > ranking.getResults()[mayor].getScore()){
                mayor = indexJ;
                }
            }
            
            if( mayor != indexI){
                scoreAux = ranking.getResults()[indexI];
                ranking.getResults()[indexI] = ranking.getResults()[mayor];
                ranking.getResults()[mayor] = scoreAux;
            }
        }
    }
     /**
      * Obtiene solo los resultados donde se obtenga un booleano positivo y se readimensionará el vector para imprimir
      *Mismo código que la funcion getGanadores pero ahora se igualan a verdadero, que indica que son ganadores
      */
    private void getGanadores(){
        Score[] rankAux;
        int contadora=0;
        
        for(int indexRank=0;indexRank<rankingOrigin.getResults().length;indexRank++){
            if(rankingOrigin.getResults()[indexRank]!=null){    
                if(rankingOrigin.getResults()[indexRank].getstatusPlayin()){
                    contadora++;
                }
            }
        }
        rankAux = new Score[contadora];
        contadora=0;
        for(int indexRank=0;indexRank<rankingOrigin.getResults().length;indexRank++){
            if(rankingOrigin.getResults()[indexRank]!=null){    
                if(rankingOrigin.getResults()[indexRank].getstatusPlayin()){
                    rankAux[contadora] = new Score();
                    rankAux[contadora] = rankingOrigin.getResults()[indexRank];
                    contadora++;
                }
            }
        }
        this.ranking.setResults(rankAux);
    }
    
    /**
      * Obtiene solo los resultados donde se obtenga un booleano positivo y se readimensionará el vector para imprimir
      */
    private void getPerdedores(){
        Score[] rankAux;
        int contadora=0;
        //Creamos un vector tipo Score que usaremos un ciclo para ver la magnitud que debe de ser
        //dependiendo del numero de Score del ranking original que obtengan en su variable booleana
        //statusPLayin sea falso
        for(int indexRank=0;indexRank<rankingOrigin.getResults().length;indexRank++){
            if(rankingOrigin.getResults()[indexRank]!=null){    
                if(rankingOrigin.getResults()[indexRank].getstatusPlayin() == false){
                    contadora++;
                }
            }
        }
        rankAux = new Score[contadora];
        contadora=0;
        //Realizamos lo mismo que el paso anterior pero construimos el objeto y le agregamos esa posicion del ranking original(score)
        for(int indexRank=0;indexRank<rankingOrigin.getResults().length;indexRank++){
            if(rankingOrigin.getResults()[indexRank]!=null){    
                if(rankingOrigin.getResults()[indexRank].getstatusPlayin() == false){
                    rankAux[contadora] = new Score();
                    rankAux[contadora] = rankingOrigin.getResults()[indexRank];
                    contadora++;
                }
            }
        }
        //Al ranking que estamos imprimiendo le asignamos sus nuevos scores
        this.ranking.setResults(rankAux);
    }
}
